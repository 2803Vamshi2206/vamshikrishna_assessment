# -*- coding: utf-8 -*-
"""<LVADSUSR76>-<Barukam vamshi krishna>-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eVXG-kbe89mVXEEKb8nrqx0AJekJ-GiM
"""

#1
import pandas as pd
df=pd.read_excel("/content/Walmart_Dataset Python_Final_Assessment.xlsx")
df.info
print("Number of rows and columns:", df.shape)
print("\nData types:")
print(df.dtypes)
print("\nSummary statistics:")
print(df.describe())
print("\nNumber of missing values:")
print(df.isnull().sum())

#2
df.drop_duplicates(inplace=True)

#3
print("\nMean:")
print(df.mean())
print("\nMedian:")
print(df.median())
print("\nMode:")
print(df.mode())
print("\nVariance:")
print(df.var())
print("\nStandard Deviation:")
print(df.std())

#4
import seaborn as sns
import matplotlib.pyplot as plt

plt.hist(df['Sales'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Sales')
plt.show()


plt.hist(df['Quantity'], bins=20, color='lightgreen', edgecolor='black')
plt.xlabel('Quantity')
plt.ylabel('Frequency')
plt.title('Distribution of Quantity')
plt.show()


plt.hist(df['Profit'], bins=20, color='salmon', edgecolor='black')
plt.xlabel('Profit')
plt.ylabel('Frequency')
plt.title('Distribution of Profit')
plt.show()

df.groupby('Geography')['Sales'].sum().plot(kind='pie', autopct='%1.1f%%')
plt.title('Sales Distribution by Geography')
plt.ylabel('')
plt.show()

df.boxplot(column='Sales', by='Category')
plt.title('Sales Distribution by Category')
plt.ylabel('Sales')
plt.xlabel('Category')
plt.show()

heatmap_data = df.pivot_table(index='Category', columns='Geography', values='Sales', aggfunc='sum')
sns.heatmap(heatmap_data, cmap='YlGnBu', annot=True, fmt=".1f")
plt.title('Sales Heatmap by Category and Geography')
plt.xlabel('Geography')
plt.ylabel('Category')
plt.show()

df.groupby('Order Date')['Sales'].sum().plot(kind='area')
plt.title('Sales Over Time')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.show()

df.pivot_table(index='Category', columns='Geography', values='Sales', aggfunc='sum').plot(kind='bar', stacked=True)
plt.title('Total Sales by Category and Geography')
plt.xlabel('Category')
plt.ylabel('Total Sales')
plt.show()

plt.figure(figsize=(10, 6))
df['Order ID'].value_counts().plot(kind='bar')
plt.xlabel('Order ID')
plt.ylabel('Count')
plt.title('Distribution of Orders by Order ID')
plt.show()

plt.figure(figsize=(10, 6))
df['Order Date'].value_counts().sort_index().plot()
plt.xlabel('Order Date')
plt.ylabel('Number of Orders')
plt.title('Number of Orders Over Time')
plt.show()


plt.figure(figsize=(10, 6))
df['Geography'].value_counts().plot(kind='bar')
plt.xlabel('Geography')
plt.ylabel('Count')
plt.title('Distribution of Orders by Geography')
plt.show()


plt.figure(figsize=(10, 6))
plt.hist(df['Sales'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Sales')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Sales'], df['Profit'], alpha=0.5)
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.title('Scatter Plot of Sales vs. Profit')
plt.show()

#5
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

#6
import seaborn as sns
import numpy as np
num_vars = ['Sales', 'Quantity', 'Profit']
for var in num_vars:
    sns.boxplot(x=df[var])
    plt.title(var)
    plt.show()

from scipy.stats import zscore
threshold = 3
z_scores = np.abs(zscore(df[num_vars]))
data_no_outliers = df[(z_scores < threshold).all(axis=1)]

for var in num_vars:
    sns.boxplot(x=data_no_outliers[var])
    plt.title(var)
    plt.show()

#7 trend Analysis
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


print(df.describe())
print(df.isnull().sum())


df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])


df['Order Year'] = df['Order Date'].dt.year

#1 Plotting sales and profit trends over the years
plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x='Order Year', y='Sales', label='Sales')
sns.lineplot(data=df, x='Order Year', y='Profit', label='Profit')
plt.title('Sales and Profit Trends Over Years')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.legend()
plt.show()

#2 determining the product category with the most growth in sales over the years
category_sales = df.groupby(['Order Year', 'Category'])['Sales'].sum().unstack()
category_sales.plot(kind='line', figsize=(12, 6))
plt.title('Sales Trend by Product Category Over Years')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.legend(title='Category')
plt.show()



yearly_category_sales = df.groupby(['Order Date', 'Category'])['Sales'].sum().reset_index()
pivot_table = yearly_category_sales.pivot(index='Order Date', columns='Category', values='Sales')

growth_rate = pivot_table.pct_change(axis='rows') * 100

growth_overall = growth_rate.sum()
most_growing_category = growth_overall.idxmax()

print("Product category with the most growth in terms of sales over the years:", most_growing_category)

#7 Customer analysis
customer_summary = df.groupby('EmailID').agg({'Order ID': 'count', 'Sales': 'sum'})
customer_summary_sorted = customer_summary.sort_values(by=['Order ID', 'Sales'], ascending=False)
top_5_customers = customer_summary_sorted.head(5)
print(top_5_customers)
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Time Difference'] = df.groupby('EmailID')['Order Date'].diff()
avg_time_between_orders = df.groupby('EmailID')['Time Difference'].mean()

print(avg_time_between_orders)


#7
#comprehensive Analytics
daily_sales_velocity = df['Sales'].sum() / df['Quantity'].sum()


df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df['Fulfillment Time'] = (df['Ship Date'] - df['Order Date']).dt.days
average_fulfillment_time = df['Fulfillment Time'].mean()


on_time_shipments = df[df['Ship Date'] >= df['Order Date']].shape[0]
total_orders = df.shape[0]
percentage_on_time_shipments = (on_time_shipments / total_orders) * 100

print("Daily Sales Velocity:", daily_sales_velocity)
print("Average Order Fulfillment Time (in days):", average_fulfillment_time)
print("Percentage of Orders Shipped on Time:", percentage_on_time_shipments)

#2
#strategies implemented to optimize the supply chain based on insights to optimize supply chain.
#PROPER PLANNING need to be done
#SOURCING OF DATAfrom various platforms.
#PRODUCTION should be controlled based on need.
#DISTRIBUTION should be done accordingly.
#TRANSPORTATION must be done early based on the products.
#CLIMATE,TRANSPORTATION AND POPULATION CAN IMPACT
