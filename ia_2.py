# -*- coding: utf-8 -*-
"""IA_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h3yT1ZfCIjlHwErWScnIuJL7j6uYALii
"""

#1
import numpy as np

def rgb_to_gray(rgb):
    return np.dot(rgb[..., :3], [0.2989, 0.5870, 0.1140])


rgb_image = np.array([
    [[255, 0, 0], [0, 255, 0], [0, 0, 255]],
    [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
    [[127,127,127],[200,200,200],[50,50,50]]
])


gray_image = rgb_to_gray(rgb_image)

print("RGB Image:")
print(rgb_image)
print("\nGrayscale Image:")
print(gray_image)

#2
def normalize_data(data):
    means = np.mean(data, axis=0)
    stds = np.std(data, axis=0)
    stds[stds == 0] = 1
    normalized_data = (data - means) / stds
    return normalized_data


data = np.array([[170, 70, 30],
                 [165, 65, 25],
                 [180, 80, 35]])


normalized_data = normalize_data(data)

print("Original Data:")
print(data)
print("\nNormalized Data:")
print(normalized_data)

#3
sensor_data=np.array([[[1,2,3],[4,5,6],[7,8,9]],
                     [[10,11,12],[13,14,15],[16,17,18]],
                     [[19,20,21],[22,23,24],[25,26,27]]])

sensor_data.shape = (3, 3, 3)
flattened_data = [sensor.flatten() for sensor in sensor_data]
concatenated_data = np.concatenate(flattened_data)
reshaped_data = concatenated_data.reshape(sensor_data.shape[0], -1)
print(reshaped_data)

#4
data = np.array([[10, 15, 20, 25],
                 [12, 18, 22, 28],
                 [8, 11, 15, 19]])

first_game_index = 0
last_game_index = -1
first_game_scores = data[:, first_game_index]
last_game_scores = data[:, last_game_index]
improvement = last_game_scores - first_game_scores
for i, imp in enumerate(improvement):
    print(f"Athlete {i + 1} improvement: {imp}")

#5
def calculate_average_scores(scores):

    exempt_indices = np.where(scores == -1)
    scores_with_nan = np.copy(scores).astype(float)
    scores_with_nan[exempt_indices] = np.nan
    last_three_subjects = scores_with_nan[:, -3:]
    average_scores = np.nanmean(last_three_subjects, axis=1)
    return average_scores

scores = np.array([
    [80, 75, 90, -1, 85],
    [70, 65, -1, 80, 75],
    [85, 90, 95, 80, 85],
    [60, 70, -1, -1, 65],
    [75, 80, 85, 90, -1]])
average_scores = calculate_average_scores(scores)
print("Average scores in the last three subjects (excluding exempt scores):")
for i, avg_score in enumerate(average_scores):
    print(f"Student {i+1}: {avg_score}")



#7
import pandas as pd
data={"Name":["Alice","Bob","Charlie","David","Eve","Frank","Grace"],
      "Age":[25,30,35,40,45,50,55],
      "City":["New York","Los Angeles","Chicago","Houston","Phoniex","Miami","Boston"],
      "Department":["HR","IT","Finanace","Marketing","Sales","IT","HR"]}
df=pd.DataFrame(data)
df_1=df[(df.Age<45) &(df.Department != "HR")][["Name","Age"]]
print(df_1)

#8
data={"Product":["Apples","Bananas","Cherries","Dates","Elderberries","Flour","Grapes"],
      "Category":["fruit","fruit","fruit","fruit","fruit","Bakery","fruit"],
      "Price":[1.20,0.50,3.00,2.50,4.00,1.50,2.00],
      "Promotion":[True,False,True,True,False,True,False]}
df=pd.DataFrame(data)
df_1=df(["Category"=="fruit"])
avg=df_1.mean()
print(df_1)



#10

import pandas as pd
data={'Department':['Electronics','Electronics','Clothing','Clothing','Home Goods'],
      'Salesperson':['Alice','Bob','Charlie','David','Eve'],
      'Sales':[70000,50000,30000,40000,60000]}
df=pd.DataFrame(data)
grouped_df=df.groupby(['Department','Salesperson']).mean()
print(grouped_df)

